java中错误的分类
编译时错误:无法通过编译   ,java不处理
运行时异常:可以通过编译   ,但在运行时,因为给与的条件不和常理,出现的异常,导致java的代码无法运行


Error:不可恢复的错误,出现此类错误,程序只能停止运行;JVM无法处理

Exception:运行时异常;可以通过代码进行处理
	runtimeException(非受检异常):java不会通知调用者要进行错误的处理,只在程序的运行期间jvm才判断
	checkedException(受检异常):java要求调用者一定要进行错误的处理,否则代码无法通过编译----

	常见异常
	 java.lang.ArrayIndexOutOfBoundsException:数组下标越界  ---runtimeException
	 java.lang.NullPointerException:空指针异常(引用了一个不存在的对象)  ---runtimeException
	 java.lang.StringIndexOutOfBoundsException:字符串下标越界 ---runtimeException
	 java.lang.ArithmeticException:算术异常 ---runtimeException
	 
	 ParseException:解析异常 ---checkedException
	FileNotFoundException:文件未找到异常 ---checkedException
	 
java异常的处理
try{ } catch(异常的分类 e){}---主动防御,由代码的开发者自行进行处理
1.catch块中应该放对对应异常的处理,尽量不要为空或打印出错信息
2.一个try可以跟N个catch块,将范围大的异常放在后面,catch(Exception e)放在最后捕获
3.尽量不要将try块的代码过长



throws关键字:抛出N(1-N)个<<异常的类型>>,以,进行分割
1.写在方法的后面,抛出异常的类型,通知JVM通知下一个调用者,一定要对异常进行捕获处理
2.将方法抛出的异常再次抛出.由下一次调用者处理
3.不要抛出非受检异常,JVM不会要求下一个调用者进行异常处理;只有抛出受检异常才有意义

自定义异常:继承Exception类,一般配合throw关键字使用
1.满足系统异常不能表示的特定异常
2.掩盖原始出错信息



throw关键字:用于抛出异常对象

继承Exception类,自定义异常为受检异常,在方法内throw异常对象的同时,也要在方法上抛出异常的类型,要求调用者进行处理
继承RuntimeException:自定义异常为非受检异常,在方法内throw异常对象的,如有不符合条件的情况,jvm按照异常的方法进行处理

自定义字符串长度不能大于10的异常


finally:必须和try或者try..catch结构连用,表示finally块中的代码必须被执行
唯一一个可以终止finally执行的语句为在try中正确的执行了System.exit(0).


	 
	 