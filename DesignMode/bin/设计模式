java共有23中设计模式
目的:降低类与类之间的耦合性,提高代码的复用性.
设计模式的六大原则
1.开闭原则:对扩展(写新代码)开放,对修改(源代码)关闭---面向接口.
2.里氏代换原则:尽量使用父类引用指向子类对象.
3.依赖倒转原则:尽量让每个类都实现一个接口,使用接口.
4.接口隔离原则:尽量让接口中只定义一个方法.
5.迪米特法则(最少知道原则):让自定义类尽量少的关联其他类
6.合成复用原则(Composite Reuse Principle):尽量不要使用继承



一.单例模式
  单列模式 需求:项目运行期间,Single类对象只能有一个 
  1.构造方法私有化,让类的外部无法创建新的对象
  2.自行实例化奔雷的对象(遵循封装原则,属性需要私有化) 
  3.对私有化的实例化本类对象只提供向外发布的接口,不提供修改接口
  4.为了在类的外部不创建对象也可以使用,必须使用static修饰

 分类
 1.饿汉单例:类加载的同事将对象也创建完毕
public class Single {
	private Single() {}
	private static Single single = new Single();
	public static Single getSingle() {
		return single;
	}
}

2.懒汉式单例(不推荐):类的对象被调用时,才创建对象
 public class LazySingle {
	private  static LazySingle single ;
	public LazySingle() {}
	//在被调用是,判断single是否有对象,没有则创建,否则直接使用
	public synchronized static LazySingle getSingle() {
		if(single==null) {
			single = new LazySingle();
		}
		return single;
	}
}
 