UDP协议:无责任无连接的协议
发送方和接受方没有连接,发送方不保证数据是否发送成功,接受方接受数据的时间,接受数据的完整性
UDP发送的信息有大小的限制

TCP/IP协议:有连接的协议,可以保证数据的安全性
(三次握手四次挥手)


java中UDP (DatagramSocket)
发送方:
1.进行数据的打包(数据报包)--包括要发送的数据的byte数组,接受端的IP地址和端口号,最终打包为DatagramPacket对象
2.创建一个DatagramSocket对象,可以指定一个固定的端口号(不能被其他程序占用),也可以由JVM自行选择随机的空闲端口号
3.使用send方法进行数据报包的发送
4.释放资源

接受方:
1.创建DatagramSocket对象,监视指定的端口(与发送端约定好的端口)
2.创建一个数据报包对象,用于接受发送来的信息,尽可能的长一点
3.调用receive方法接受数据,进行数据处理
4.释放资源

注意点:
1.要想保证收到信息,必须先开启接受端;接受端即使没开,发送端也可发送信息
2.发送信息的最大长度有限制  20K
3.发送是无责任的,发送方只负责发,不保证能被收到



java中TCP(ServerSocket和Socket)
客户端:
1.创建指向服务器端的套接字对象(Socket)(服务器端IP地址和端口)
2.获取Socket对象的输入(读入)/输出流(写出)与服务器进行信息的交换
3.输出流用于向服务器发送信息         客户端-------write------>服务器
  输入流用于读取服务器发回的回执   客户端<-------read------服务器
4.释放资源


服务器:
1.创建指定端口(与客户端约定的端口)的服务器端套接字ServerSocket对象
2.侦听并接受到此套接字的连接。--- (等待客户端发起请求),accept()返回客户端套接字的对象
3.获取客户端套接字对象的输入/输出流进行信息的交换
4. 输入流用于读取客户端发来的信息   服务器<-------read------客户端
    输出流用于向客户端发送回执         服务器-------write------>客户端
5.释放资源


聊天室:
使用基于UDP的Java Socket编程，完成在线咨询功能：
 * 1)客户向咨询人员咨询。
 * 2)咨询人员给出回答。
 * 3)客户和咨询人员可以一直沟通，直到客户发送bye给咨询人员。
 
 1.利用Scanner进行键盘输入
 2.不能接受一次就关闭程序---利用死循环
 
 
 
 
 
 
 
 
 
 
 
 
 
